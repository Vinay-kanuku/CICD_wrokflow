# This workflow is designed to automate the CI/CD process for a Dockerized Flask application.
# It performs the following tasks:
# 1. Installs Python dependencies.
# 2. Runs tests using pytest.
# 3. Lints the code using flake8.
# 4. Builds and deploys a Docker image of the Flask application.
#
# For more information, see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python
name: CI/CD Dockerized Flask app 
on:
  # The workflow will be triggered when a push or pull request is made to the main branch.
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
permissions:
  # The workflow requires read access to the contents of the repository.
  contents: read
jobs:
  build-and-test:
    # The build-and-test job will run on the latest version of Ubuntu.
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      # The checkout step clones the repository to the runner.
    - name: Set up Python 3.12.3
      uses: actions/setup-python@v3
      with:
        python-version: "3.12.3"
      # The setup-python step sets up the specified version of Python.
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      # The install dependencies step installs the required Python packages.
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      # The lint with flake8 step checks the code for style and formatting issues.
    - name: Test with pytest
      run: |
        pytest
      # The test with pytest step runs the tests using pytest.
  build-and-deploy:
    # The build-and-deploy job will run after the build-and-test job is successful.
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      # Checkout the repository code in this job too
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2 
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      # This step logs in to Docker Hub using the credentials stored in GitHub secrets.
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      # Sets up Docker Buildx for more efficient builds
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/flask-app:latest,${{ secrets.DOCKER_USERNAME }}/flask-app:${{ github.sha }}
      # Builds and pushes the Docker image to Docker Hub with proper tagging
    
    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/flask-app:latest
          docker stop flask-app || true
          docker rm flask-app || true
          docker run -d --name flask-app -p 5000:5000 ${{ secrets.DOCKER_USERNAME }}/flask-app:latest
      # This step connects to your server via SSH and deploys the new image